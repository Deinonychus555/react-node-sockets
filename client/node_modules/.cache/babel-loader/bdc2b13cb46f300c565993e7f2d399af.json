{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, createContext } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const ConversationsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  const createConversation = recipients => {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  };\n\n  const formattedConversations = conversations.map((conversation, i) => {\n    const recipients = conversations.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = i;\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationsProvider, \"wZNv/Ep9zNO7X8IPGeAFTlAmjLI=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\nexport const useConversations = () => {\n  _s2();\n\n  return useContext(ConversationsContext);\n};\n\n_s2(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","createContext","useLocalStorage","useContacts","ConversationsContext","ConversationsProvider","children","conversations","setConversations","selectedConversationIndex","setConversationIndex","useState","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","i","recipient","contact","find","id","name","selected","value","useConversations"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,SAAQC,WAAR,QAA0B,oBAA1B;AAGA,MAAMC,oBAAoB,gBAAGH,aAAa,EAA1C;AAEA,OAAO,MAAMI,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAEnD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM,CAACO,yBAAD,EAA4BC,oBAA5B,IAAoDC,QAAQ,CAAC,CAAD,CAAlE;AACA,QAAM;AAACC,IAAAA;AAAD,MAAaT,WAAW,EAA9B;;AAEA,QAAMU,kBAAkB,GAAIC,UAAD,IAAgB;AACvCN,IAAAA,gBAAgB,CAACO,iBAAiB,IAAI;AAClC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAACD,QAAAA,UAAD;AAAaE,QAAAA,QAAQ,EAAE;AAAvB,OAAvB,CAAP;AACH,KAFe,CAAhB;AAGH,GAJD;;AAMA,QAAMC,sBAAsB,GAAGV,aAAa,CAACW,GAAd,CAAkB,CAACC,YAAD,EAAeC,CAAf,KAAqB;AAClE,UAAMN,UAAU,GAAGP,aAAa,CAACO,UAAd,CAAyBI,GAAzB,CAA6BG,SAAS,IAAI;AACzD,YAAMC,OAAO,GAAGV,QAAQ,CAACW,IAAT,CAAcD,OAAO,IAAIA,OAAO,CAACE,EAAR,KAAeH,SAAxC,CAAhB;AACA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAACG,QAAAA,EAAE,EAAEH,SAAL;AAAgBI,QAAAA;AAAhB,OAAP;AACH,KAJkB,CAAnB;AAKA,UAAMC,QAAQ,GAAGN,CAAjB;AACA,WAAO,EAAC,GAAGD,YAAJ;AAAkBL,MAAAA;AAAlB,KAAP;AACH,GAR8B,CAA/B;AAUA,QAAMa,KAAK,GAAG;AACVpB,IAAAA,aAAa,EAAEU,sBADL;AAEVJ,IAAAA;AAFU,GAAd;AAKA,sBACI,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEc,KAAtC;AAAA,cACKrB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhCM;;GAAMD,qB;UAEiCH,e,EAEvBC,W;;;KAJVE,qB;AAkCb,OAAO,MAAMuB,gBAAgB,GAAG;AAAA;;AAAA,SAAM5B,UAAU,CAACI,oBAAD,CAAhB;AAAA,CAAzB;;IAAMwB,gB","sourcesContent":["import React, {useContext, createContext } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {useContacts} from './ContactsProvider';\n\n\nconst ConversationsContext = createContext();\n\nexport const ConversationsProvider = ({ children }) => {\n\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setConversationIndex] = useState(0);\n    const {contacts} = useContacts();\n\n    const createConversation = (recipients) => {\n        setConversations(prevConversations => {\n            return [...prevConversations, {recipients, messages: []}]\n        })\n    }\n    \n    const formattedConversations = conversations.map((conversation, i) => {\n        const recipients = conversations.recipients.map(recipient => {\n            const contact = contacts.find(contact => contact.id === recipient);\n            const name = (contact && contact.name) || recipient;\n            return {id: recipient, name}\n        })\n        const selected = i\n        return {...conversation, recipients};\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        createConversation,\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nexport const useConversations = () => useContext(ConversationsContext);\n"]},"metadata":{},"sourceType":"module"}