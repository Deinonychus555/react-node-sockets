{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, createContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nconst ConversationsContext = /*#__PURE__*/createContext();\n\nconst arrayEquality = (a, b) => {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, i) => {\n    return element === b[i];\n  });\n};\n\nexport const ConversationsProvider = ({\n  id,\n  children\n}) => {\n  _s();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  const createConversation = recipients => {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }; // hemos puesto la función dentro de una callback\n\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  const sendMessage = (recipients, text) => {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  };\n\n  const formattedConversations = conversations.map((conversation, i) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => contact.id === message.sender);\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = i === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationsProvider, \"Jxgm++OvQ/DgJB8A+mBnXmIBHrM=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\nexport const useConversations = () => {\n  _s2();\n\n  return useContext(ConversationsContext);\n};\n\n_s2(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","createContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","arrayEquality","a","b","length","sort","every","element","i","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","on","off","sendMessage","emit","formattedConversations","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","useConversations"],"mappings":"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","sourcesContent":["import React, {useContext, createContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {useContacts} from './ContactsProvider';\nimport {useSocket} from './SocketProvider';\n\n\nconst ConversationsContext = createContext();\n\nconst arrayEquality = (a, b) => {\n    if(a.length !== b.length) return false;\n    a.sort()\n    b.sort()\n\n    return a.every((element, i) => {\n        return element === b[i];\n    })\n}\n\nexport const ConversationsProvider = ({ id, children }) => {\n\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n    const {contacts} = useContacts();\n    const socket = useSocket();\n\n    const createConversation = (recipients) => {\n        setConversations(prevConversations => {\n            return [...prevConversations, {recipients, messages: []}]\n        })\n    }\n    \n    // hemos puesto la función dentro de una callback\n    const addMessageToConversation = useCallback(({recipients, text, sender}) => {\n        setConversations(prevConversations => {\n            let madeChange = false;\n            const newMessage = { sender, text };\n            const newConversations = prevConversations.map(conversation => {\n                if(arrayEquality(conversation.recipients, recipients)){\n                    madeChange = true;\n                    return  {\n                        ...conversation,\n                        messages: [...conversation.messages, newMessage]\n                    }\n                }    \n                return conversation;    \n                \n            });\n            if(madeChange){\n                return newConversations;\n            }else{\n                return [\n                    ...prevConversations, \n                    {recipients, messages: [newMessage]}\n                ]\n            }\n        })\n    }, [setConversations])\n\n    useEffect(() => {\n        if(socket == null) return\n        socket.on('receive-message', addMessageToConversation)\n        return () => socket.off('receive-message');\n    }, [socket, addMessageToConversation])\n\n    const sendMessage = (recipients, text) => {\n\n        socket.emit('send-message', {recipients, text})\n        addMessageToConversation({recipients, text, sender:id})\n    }\n    \n    const formattedConversations = conversations.map((conversation, i) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => contact.id === recipient);\n            const name = (contact && contact.name) || recipient;\n            return {id: recipient, name}\n        })\n        const messages = conversation.messages.map(message => {\n            const contact = contacts.find(contact => contact.id === message.sender);\n            const name = (contact && contact.name) || message.sender;\n            const fromMe = id === message.sender\n            return {...message, senderName: name, fromMe}; \n        })\n        const selected = i === selectedConversationIndex\n        return {...conversation, messages, recipients, selected};\n    })\n    \n    \n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation,\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nexport const useConversations = () => useContext(ConversationsContext);\n"]},"metadata":{},"sourceType":"module"}