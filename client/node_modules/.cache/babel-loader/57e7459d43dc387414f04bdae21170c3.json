{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, createContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const ConversationsProvider = ({\n  id,\n  children\n}) => {\n  _s();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  const createConversation = recipients => {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  };\n\n  const addMessageToConversation = ({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madechange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  };\n\n  const sendMessage = (recipients, text) => {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  };\n\n  const formattedConversations = conversations.map((conversation, i) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = i === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  console.log('ConversationProvider');\n  console.log(conversations);\n  console.log(formattedConversations);\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationsProvider, \"A7rfBETu6KN1Q21Ig/5PWBuEG9I=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\nexport const useConversations = () => {\n  _s2();\n\n  return useContext(ConversationsContext);\n};\n\n_s2(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","createContext","useState","useLocalStorage","useContacts","ConversationsContext","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","madechange","sendMessage","formattedConversations","i","recipient","contact","find","name","selected","console","log","value","selectedConversation","selectConversationIndex","useConversations"],"mappings":"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","sourcesContent":["import React, {useContext, createContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {useContacts} from './ContactsProvider';\n\n\nconst ConversationsContext = createContext();\n\nexport const ConversationsProvider = ({ id, children }) => {\n\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n    const {contacts} = useContacts();\n\n    const createConversation = (recipients) => {\n        setConversations(prevConversations => {\n            return [...prevConversations, {recipients, messages: []}]\n        })\n    }\n\n    const addMessageToConversation = ({recipients, text, sender}) => {\n        setConversations(prevConversations => {\n            let madeChange = false;\n            const newMessage = { sender, text };\n            const newConversations = prevConversations.map(conversation => {\n                if(arrayEquality(conversation.recipients, recipients)){\n                    madeChange = true;\n                    return  {\n                        ...conversation,\n                        messages: [...conversation.messages, newMessage]\n                    }\n                }    \n                return conversation;    \n                \n            });\n            if(madechange){\n                return newConversations;\n            }else{\n                return [\n                    ...prevConversations, \n                    {recipients, messages: [newMessage]}\n                ]\n            }\n        })\n    }\n\n    const sendMessage = (recipients, text) => {\n        addMessageToConversation({recipients, text, sender:id})\n    }\n    \n    const formattedConversations = conversations.map((conversation, i) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => contact.id === recipient);\n            const name = (contact && contact.name) || recipient;\n            return {id: recipient, name}\n        })\n        const selected = i === selectedConversationIndex\n        return {...conversation, recipients, selected};\n    })\n\n    console.log('ConversationProvider');\n    console.log(conversations);\n    console.log(formattedConversations);\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation,\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nexport const useConversations = () => useContext(ConversationsContext);\n"]},"metadata":{},"sourceType":"module"}