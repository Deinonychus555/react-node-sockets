{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, createContext, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nconst ConversationsContext = /*#__PURE__*/createContext();\nexport const ConversationsProvider = ({\n  id,\n  children\n}) => {\n  _s();\n\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  const createConversation = recipients => {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  };\n\n  const addMessageToConversation = ({\n    recipients,\n    text,\n    sender\n  }) => {};\n\n  const sendMessage = (recipients, text, sender) => {\n    addMessageToConversation({\n      recipients,\n      text,\n      sender\n    });\n  };\n\n  const formattedConversations = conversations.map((conversation, i) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient);\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = i === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  console.log('ConversationProvider');\n  console.log(conversations);\n  console.log(formattedConversations);\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationsProvider, \"A7rfBETu6KN1Q21Ig/5PWBuEG9I=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\nexport const useConversations = () => {\n  _s2();\n\n  return useContext(ConversationsContext);\n};\n\n_s2(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/home/jaea/Programacion/JS/react-messaging-app/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","createContext","useState","useLocalStorage","useContacts","ConversationsContext","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","sendMessage","formattedConversations","map","conversation","i","recipient","contact","find","name","selected","console","log","value","selectedConversation","selectConversationIndex","useConversations"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,aAA3B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,SAAQC,WAAR,QAA0B,oBAA1B;AAGA,MAAMC,oBAAoB,gBAAGJ,aAAa,EAA1C;AAEA,OAAO,MAAMK,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAsB;AAAA;;AAEvD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM,CAACQ,yBAAD,EAA4BC,4BAA5B,IAA4DV,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAACW,IAAAA;AAAD,MAAaT,WAAW,EAA9B;;AAEA,QAAMU,kBAAkB,GAAIC,UAAD,IAAgB;AACvCL,IAAAA,gBAAgB,CAACM,iBAAiB,IAAI;AAClC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAACD,QAAAA,UAAD;AAAaE,QAAAA,QAAQ,EAAE;AAAvB,OAAvB,CAAP;AACH,KAFe,CAAhB;AAGH,GAJD;;AAMA,QAAMC,wBAAwB,GAAG,CAAC;AAACH,IAAAA,UAAD;AAAaI,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,GAAD,KAAgC,CAEhE,CAFD;;AAIA,QAAMC,WAAW,GAAG,CAACN,UAAD,EAAaI,IAAb,EAAmBC,MAAnB,KAA8B;AAC9CF,IAAAA,wBAAwB,CAAC;AAACH,MAAAA,UAAD;AAAaI,MAAAA,IAAb;AAAmBC,MAAAA;AAAnB,KAAD,CAAxB;AACH,GAFD;;AAIA,QAAME,sBAAsB,GAAGb,aAAa,CAACc,GAAd,CAAkB,CAACC,YAAD,EAAeC,CAAf,KAAqB;AAClE,UAAMV,UAAU,GAAGS,YAAY,CAACT,UAAb,CAAwBQ,GAAxB,CAA4BG,SAAS,IAAI;AACxD,YAAMC,OAAO,GAAGd,QAAQ,CAACe,IAAT,CAAcD,OAAO,IAAIA,OAAO,CAACpB,EAAR,KAAemB,SAAxC,CAAhB;AACA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,SAA1C;AACA,aAAO;AAACnB,QAAAA,EAAE,EAAEmB,SAAL;AAAgBG,QAAAA;AAAhB,OAAP;AACH,KAJkB,CAAnB;AAKA,UAAMC,QAAQ,GAAGL,CAAC,KAAKd,yBAAvB;AACA,WAAO,EAAC,GAAGa,YAAJ;AAAkBT,MAAAA,UAAlB;AAA8Be,MAAAA;AAA9B,KAAP;AACH,GAR8B,CAA/B;AAUAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYvB,aAAZ;AACAsB,EAAAA,OAAO,CAACC,GAAR,CAAYV,sBAAZ;AAEA,QAAMW,KAAK,GAAG;AACVxB,IAAAA,aAAa,EAAEa,sBADL;AAEVY,IAAAA,oBAAoB,EAAEZ,sBAAsB,CAACX,yBAAD,CAFlC;AAGVwB,IAAAA,uBAAuB,EAAEvB,4BAHf;AAIVE,IAAAA;AAJU,GAAd;AAOA,sBACI,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEmB,KAAtC;AAAA,cACKzB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9CM;;GAAMF,qB;UAEiCH,e,EAEvBC,W;;;KAJVE,qB;AAgDb,OAAO,MAAM8B,gBAAgB,GAAG;AAAA;;AAAA,SAAMpC,UAAU,CAACK,oBAAD,CAAhB;AAAA,CAAzB;;IAAM+B,gB","sourcesContent":["import React, {useContext, createContext, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {useContacts} from './ContactsProvider';\n\n\nconst ConversationsContext = createContext();\n\nexport const ConversationsProvider = ({ id, children }) => {\n\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n    const {contacts} = useContacts();\n\n    const createConversation = (recipients) => {\n        setConversations(prevConversations => {\n            return [...prevConversations, {recipients, messages: []}]\n        })\n    }\n\n    const addMessageToConversation = ({recipients, text, sender}) => {\n\n    }\n\n    const sendMessage = (recipients, text, sender) => {\n        addMessageToConversation({recipients, text, sender})\n    }\n    \n    const formattedConversations = conversations.map((conversation, i) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => contact.id === recipient);\n            const name = (contact && contact.name) || recipient;\n            return {id: recipient, name}\n        })\n        const selected = i === selectedConversationIndex\n        return {...conversation, recipients, selected};\n    })\n\n    console.log('ConversationProvider');\n    console.log(conversations);\n    console.log(formattedConversations);\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation,\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nexport const useConversations = () => useContext(ConversationsContext);\n"]},"metadata":{},"sourceType":"module"}